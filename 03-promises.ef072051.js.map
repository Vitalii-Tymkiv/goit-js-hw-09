{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAKA,IAAIC,EACAC,EACAC,EALYC,SAASC,cAAc,SAC/BC,iBAAiB,UAazB,SAAyBC,GACvBA,EAAMC,iBACN,MACEC,UAAUC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cAEVZ,EAAea,OAAOC,SAASL,EAAMM,OACrCd,EAAcY,OAAOC,SAASJ,EAAKK,OACnCb,EAAgBW,OAAOC,SAASH,EAAOI,OAmBzC,WACE,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAec,GAAK,EACtCC,EAAcD,EAAI,EAAGhB,GAClBkB,MAAK,EAACC,SAAEA,EAAUC,aAAAC,MACjBvB,EAAAwB,OAAOC,QACL,uBAAqBJ,QAAiBE,MAAkBG,MAI3DC,OAAM,EAACN,SAAEA,EAAUC,aAAAM,MAClB5B,EAAAwB,OAAOK,QACL,sBAAoBR,QAAeO,MAAkBF,MAI3DxB,GAAgBC,EAhClB2B,GACAtB,EAAMM,cAAciB,WAlBtB,MAAML,EAAgB,CACpBL,SAAU,YACVW,aAAa,EACbC,cAAc,EACdC,aAAa,GAiBf,SAASf,EAAcE,EAAUc,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEnB,EAAUC,aAAAa,IAEpBM,EAAO,C,SAAEpB,EAAUC,aAAAa,MAEpBA","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', onFormSubmitter);\n\nlet delayInteger;\nlet stepInteger;\nlet amountInteger;\n\nconst notifyOptions = {\n  position: 'right-top',\n  backOverlay: true,\n  clickToClose: false,\n  closeButton: false,\n};\n\nfunction onFormSubmitter(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  delayInteger = Number.parseInt(delay.value);\n  stepInteger = Number.parseInt(step.value);\n  amountInteger = Number.parseInt(amount.value);\n\n  filterPromises();\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delayInteger) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delayInteger });\n      } else {\n        reject({ position, delayInteger });\n      }\n    }, delayInteger);\n  });\n}\n\nfunction filterPromises() {\n  for (let i = 0; i < amountInteger; i += 1) {\n    createPromise(i + 1, delayInteger)\n      .then(({ position, delayInteger }) => {\n        Notify.success(\n          `✅ Fulfilled promise ${position} in ${delayInteger}ms`,\n          notifyOptions\n        );\n      })\n      .catch(({ position, delayInteger }) => {\n        Notify.failure(\n          `❌ Rejected promise ${position} in ${delayInteger}ms`,\n          notifyOptions\n        );\n      });\n    delayInteger += stepInteger;\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$delayInteger","$47d4ff9957288465$var$stepInteger","$47d4ff9957288465$var$amountInteger","document","querySelector","addEventListener","event","preventDefault","elements","delay","step","amount","currentTarget","Number","parseInt","value","i","$47d4ff9957288465$var$createPromise","then","position","delayInteger","delayInteger2","Notify","success","$47d4ff9957288465$var$notifyOptions","catch","delayInteger3","failure","$47d4ff9957288465$var$filterPromises","reset","backOverlay","clickToClose","closeButton","delayInteger1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.ef072051.js.map"}